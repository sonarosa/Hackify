import streamlit as st
import openai

# Step 1: Set your OpenAI API key
API_KEY = "API"
openai.api_key = API_KEY


# Function to collect patient information
def collect_patient_info():
    st.title("Patient Information for Skin Disease Treatment")

    # Collect patient details
    name = st.text_input("Patient's Name")
    age = st.number_input("Patient's Age", min_value=1, step=1)
    gender = st.selectbox("Patient's Gender", ["Male", "Female", "Other"])
    skin_type = st.selectbox("Patient's Skin Type", ["Dry", "Oily", "Combination", "Normal"])
    symptoms = st.text_area("Describe the patient's skin disease symptoms")
    severity = st.selectbox("Severity of the symptoms", ["Mild", "Moderate", "Severe"])
    duration = st.number_input("Duration of symptoms (in days)", min_value=1, step=1)
    allergies = st.radio("Does the patient have any allergies?", ["Yes", "No"])
    allergy_details = st.text_area("List the patient's allergies") if allergies == "Yes" else "None"

    # Return collected information as a dictionary
    return {
        "name": name,
        "age": age,
        "gender": gender,
        "skin_type": skin_type,
        "symptoms": symptoms,
        "severity": severity,
        "duration": duration,
        "allergies": allergy_details,
    }

# Function to generate insights with GPT-3.5-turbo
def generate_openai_insights(patient_info):
    prompt = f"""
    Patient Information:
    - Name: {patient_info['name']}
    - Age: {patient_info['age']}
    - Gender: {patient_info['gender']}
    - Skin Type: {patient_info['skin_type']}
    - Symptoms: {patient_info['symptoms']}
    - Severity: {patient_info['severity']}
    - Duration of Symptoms: {patient_info['duration']} days
    - Allergies: {patient_info['allergies']}

    Based on this information, suggest some basic treatment plans or recommendations for a doctor to consider.
    """

    # Create the response with ChatCompletion
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a medical expert."},
            {"role": "user", "content": prompt},
        ],
        max_tokens=150,
    )

    return response.choices[0].message['content']

# Main Streamlit app
def main():
    # Collect patient info
    patient_info = collect_patient_info()

    if st.button("Generate Treatment Suggestions"):
        # Get suggestions from GPT-3.5-turbo
        insights = generate_openai_insights(patient_info)
        
        st.subheader("Suggested Treatment Plans")
        st.markdown(insights)

        # Disclaimer: Always verify AI suggestions with a professional
        st.warning("These suggestions are generated by AI and should be reviewed by a licensed doctor before implementation.")

# Run the Streamlit application
if __name__ == "__main__":
    main()
